{"version":3,"sources":["../scripts.babel/background.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;IAEP,WAAW;AACf,WADI,WAAW,CACH,GAAG,EAAE,OAAO,EAAE;0BADtB,WAAW;;;AAGb,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AACxB,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,wBAAwB,CAAC;;;;;AAAC,AAKnD,QAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAChD,QAAI,CAAC,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AACrD,QAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;GACjD;;eAZG,WAAW;;iCAcF,GAAG,EAAC,EAEhB;;;iCAEY,GAAG,EAAC,EAEhB;;;gCAEW,GAAG,EAAC;AACd,UAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,CAAC;;AAAC,KAE1C;;;yCAEoB,GAAG,EAAC,EAExB;;;mCAEc,GAAG,EAAC;AACjB,aAAO,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACtC,YAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAC,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;KAC/D;;;SAlCG,WAAW;;;AAqCjB,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,UAAA,OAAO,EAAI;AAChD,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACzD,CAAC,CAAC;;AAEH,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;;AAEpD,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC;;;;;;AAAC,AAM5D,IAAI,WAAW,GAAG,IAAI,WAAW,EAAE;;;;;;AAAC,AAMpC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAClC,UAAS,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE;AACtC,MAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAC;AAC/B,QAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;AAC9B,WAAO,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;AAChC,eAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAC7B,gBAAY,CAAC,EAAC,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC;GACpC;CACF,CAAC,CAAC","file":"background.js","sourcesContent":["'use strict';\n\nclass BeamHandler{\n  constructor(url, options) {\n    //Load settings\n    this.settings = options;\n    this.socket = io.connect('http://localhost:3000/'); //replace with url later\n    /**\n    * Socket.io listeners\n    * Handle messages received from socket server\n    */\n    this.socket.on('connection', this.onConnection);\n    this.socket.on('incoming beam', this.onIncomingBeam);\n    this.socket.on('disconnect', this.onDisconnect);\n  }\n  \n  onConnection(msg){\n\n  }\n  \n  onDisconnect(msg){\n    \n  }\n  \n  sendBeamTab(url){\n    this.socket.emit('beam tab', {url: url});\n    //TODO handle success from server, etc\n  }\n  \n  incomingBeamCallback(tab){\n    \n  }\n  \n  onIncomingBeam(msg){\n    console.log('incoming beam', msg.url);\n    chrome.tabs.create({url: msg.url}, this.incomingBeamCallback);\n  }\n}\n\nchrome.runtime.onInstalled.addListener(details => {\n  console.log('previousVersion', details.previousVersion);\n});\n\nchrome.browserAction.setBadgeText({text: '\\'Allo'});\n\nconsole.log('\\'Allo \\'Allo! Event Page for Browser Action');\n\n/**\n * Instantiate beamHandler to handle socket connections\n */\n\nlet beamHandler = new BeamHandler();\n\n/**\n * Chrome runtime listeners\n * Messages sent from other parts of the extension will be received here\n */\nchrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    if (request.action === 'beamTab'){\n      let url = request.options.url;\n      console.log('beaming tab', url);\n      beamHandler.sendBeamTab(url);\n      sendResponse({status: 'received'});\n    }\n  });"]}